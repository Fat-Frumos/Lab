//git@github.com:Fat-Frumos/Lab.git/

pipeline {
    agent any
    stages {
        stage('Clone repo') {
            steps {
                git branch: 'module#3', credentialsId: '337c23bd-e9ce-4b42-973a-9011487bd289', url: 'https://github.com/Fat-Frumos/Lab.git'
            }
        }

        stage('Maven Build') {
            steps {
                dir('Module#04') {
                    // bat 'mvn dependency:resolve -U'
                    bat 'mvn clean install -e'
                    echo "Maven Package Goal Executed Successfully!";
                }
            }
        }
        
        // stage('JUNit Reports') {
        //     steps {
        //             junit 'target/surefire-reports/*.xml'
		      //          echo "Publishing JUnit reports"
        //     }
        // }
        
        // stage('Jacoco Reports') {
        //     steps {
        //           jacoco()
        //           echo "Publishing Jacoco Code Coverage Reports";
        //     }
        // }
        
        
        stage('Model') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f model/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }        
        stage('Service-api') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f service-api/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }
        stage('Service-impl') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f service-impl/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }         
        stage('Repository-api') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f repository-api/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }
        stage('Repository-impl') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f repository-impl/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }
        stage('Web-app') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f web-app/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }       
        stage('Repository-spring-jpa') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f repository-spring-jpa/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }
        stage('Security-service') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn clean install sonar:sonar -B -f security-service/pom.xml -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }                       
        stage('Parent') {
            steps {
                dir('Module#04') {
                    withSonarQubeEnv('Sonar-Server-10.1'){
                    bat 'mvn sonar:sonar -Dsonar.password=admin -Dsonar.login=admin'
                    }
                }
            }
        }

  // stage('Quality Gate Check') {
  //           steps {
  //               timeout(time: 1, unit: 'HOURS') {
  //                     script {
  //                       def qg = waitForQualityGate()
  //                       if (qg.status != 'OK') {
  //                           error "Quality Gate did not pass. Check SonarQube for details:/dashboard?id="
  //                       }
  //                   }
  //               }
  //           }
  //       }

        stage('Deploy') {
            steps {
                dir('Module#04') {
                bat 'mvn install tomcat7:deploy -X'
                echo "Deployed Successfully"
                }
            }
        }
    }
}
